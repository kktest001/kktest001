<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<!-- 为这个mapper指定一个唯一的namespace，namespace的值习惯上设置成包名+sql映射文件名，这样就能够保证namespace的值是唯一的 
	例如namespace="me.gacl.mapping.userMapper"就是me.gacl.mapping(包名)+userMapper(userMapper.xml文件去除后缀) -->
<mapper namespace="com.kk.spring.beans.UserMapperDao">
	<!-- 在select标签中编写查询的SQL语句， 设置select标签的id属性为getUser，id属性值必须是唯一的，不能够重复 使用parameterType属性指明查询时使用的参数类型，resultType属性指明查询返回的结果集类型 
		resultType="me.gacl.domain.User"就表示将查询结果封装成一个User类的对象返回 User类就是users表所对应的实体类 -->
	<!-- 根据id查询得到一个user对象 -->
	<!-- <select id="getUser" parameterType="int" -->
	<!-- resultType="com.kk.domain.User"> -->
	<!-- select * from users where id=#{id} -->
	<!-- </select> -->
	<update id="updateUser" parameterType="com.kk.spring.beans.User">
		update user set username=#{username}
		<if test="password!=null and password!=''">
		,password=#{password}
		</if>
		<if test="realname!=null and realname!=''">
		,realname=#{realname}
		</if>
		<if test="age!=0">
		,age=#{age}
		</if>
		 where kid=#{kid}
	</update>
	<select id="getUserBeanById" resultType="com.kk.spring.beans.User" parameterType="int">
		select * from user where kid=#{kid}
	</select>
    <select id="getUserBean" resultType="com.kk.spring.beans.User" parameterType="com.kk.spring.beans.User">
    	select * from user where username=#{username} and password=#{password}
    </select>
	<select id="getAllUser" resultType="com.kk.spring.beans.User">
		select * from user
	</select>
	<select id="getAllUserExId" resultType="com.kk.spring.beans.User" parameterType="int">
		select * from user where kid!=#{kid}
	</select>
	<delete id="deleteUser" parameterType="int">
		delete from user where kid=#{kid}
	</delete>
	<insert id="insertUser" parameterType="com.kk.spring.beans.User">
		insert into
		user(username,password,realname,age)
		values(#{username},#{password},#{realname},#{age})
	</insert>
</mapper>